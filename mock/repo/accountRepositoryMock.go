// Code generated by mockery v2.34.2. DO NOT EDIT.

package repo

import (
	context "context"
	entity "userAuthApp/model/entity"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// InterfaceAccountRepository is an autogenerated mock type for the InterfaceAccountRepository type
type InterfaceAccountRepository struct {
	mock.Mock
}

// GetByEmail provides a mock function with given fields: ctx, tx, email
func (_m *InterfaceAccountRepository) GetByEmail(ctx context.Context, tx *sql.Tx, email string) (*entity.Accounts, error) {
	ret := _m.Called(ctx, tx, email)

	var r0 *entity.Accounts
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string) (*entity.Accounts, error)); ok {
		return rf(ctx, tx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string) *entity.Accounts); ok {
		r0 = rf(ctx, tx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Accounts)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, string) error); ok {
		r1 = rf(ctx, tx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, tx, id
func (_m *InterfaceAccountRepository) GetById(ctx context.Context, tx *sql.Tx, id int) (*entity.Accounts, error) {
	ret := _m.Called(ctx, tx, id)

	var r0 *entity.Accounts
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) (*entity.Accounts, error)); ok {
		return rf(ctx, tx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, int) *entity.Accounts); ok {
		r0 = rf(ctx, tx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Accounts)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, int) error); ok {
		r1 = rf(ctx, tx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAccount provides a mock function with given fields: ctx, tx, _a2
func (_m *InterfaceAccountRepository) InsertAccount(ctx context.Context, tx *sql.Tx, _a2 *entity.Accounts) (*entity.Accounts, error) {
	ret := _m.Called(ctx, tx, _a2)

	var r0 *entity.Accounts
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *entity.Accounts) (*entity.Accounts, error)); ok {
		return rf(ctx, tx, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *entity.Accounts) *entity.Accounts); ok {
		r0 = rf(ctx, tx, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Accounts)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, *entity.Accounts) error); ok {
		r1 = rf(ctx, tx, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInterfaceAccountRepository creates a new instance of InterfaceAccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterfaceAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *InterfaceAccountRepository {
	mock := &InterfaceAccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
